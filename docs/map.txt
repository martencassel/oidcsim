----------------------------------------------------------------------------------------------------------------

Interface (HTTP)
â””â”€â”€ AuthorizeHandler â†’ calls AuthorizeService

Application
â””â”€â”€ AuthorizeService
    â”œâ”€â”€ ClientRepo (domain interface)
    â”œâ”€â”€ FlowRegistry (app interface)
    â””â”€â”€ AuthorizeFlow
        â”œâ”€â”€ Validator (infra)
        â””â”€â”€ Handler (infra, calls DelegationService + AuthorizationCodeRepo)

Domain
â”œâ”€â”€ Entities: AuthorizationCode, AuthorizeRequest, Client
â”œâ”€â”€ Interfaces: AuthorizationCodeRepo, ClientRepo
â””â”€â”€ Rules: redirect URI match, PKCE check, expiry

Infrastructure
â”œâ”€â”€ flows/: AuthCodeValidator, AuthCodeHandler
â”œâ”€â”€ registry/: FlowRegistry impl
â”œâ”€â”€ persistence/: AuthorizationCodeRepo impls
â””â”€â”€ security/: RandomCodeGenerator

-----------------------------------------------------------------------------------------------------------

ðŸ—º The mental map
Think of it as four concentric rings:

1. Domain â†’ Your business language and rules (pure Go, no HTTP/DB)
2. Application â†’ Orchestrates use cases, coordinates domain objects
3. Infrastructure â†’ Implements technical details (DB, crypto, registries)
4. Interface â†’ Talks to the outside world (HTTP handlers, CLI, gRPC)


/authorize

- Domain Layer (internal/domain/oauth2/)

* Entities / Value Objects
* Interfaces
* Business Rules

- Application Layer (internal/application/oauth2/)

* Use case services

- AuthorizeService -> orchestrate the /authorize flow
1. Validate the request
2. Load client
3. Validate redirect URI
4. Resolve AuthorizeFlow from FlowRegistry
5. Call Flows validator
6. Call Flows handler

- Flow contracts
1. AuthorizeValidator interface
2. AuthorizeHandler interface
3. AuthorizeFlow struct { Validator, Handler }
4. FlowRegistry interface -> Get(reponseType) (AuthorizeFlow, error)


- Infrastructure Layer

* Flow implementations (internal/infrastructure/oauth2/flows/)
* Flow registry (internal/infrastructure/oauth2/registry/)
* Persistence (internal/infrastructure/oauth2/persistence/)
* Security utils (internal/infrastructure/security/)

- Interface Layer (internal/interface/http/oauth2/)

* HTTP handlers
* Middleware

- How Delegation fits in

* Delegation domain: Delegation entity, DelegationRepo
* Delegation application: DelegationService (EnsureConsent, GetDelegation)
* AuthCodeHandler (infrastructure, part of "code" flow) calls DelegationService before issuing a code.



